// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package lucene.actions;

import java.io.IOException;
import java.io.StringReader;
import lucene.helpers.LuceneFactory;
import org.apache.lucene.analysis.charfilter.HTMLStripCharFilter;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.TextField;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;

/**
 * Add or Update an index. The search text contains all terms separated by spaces.Background processing may take 5 seconds. Depends on the LuceneIntervalSeconds constant.
 */
public class UpdateIndex extends CustomJavaAction<Boolean>
{
	private Long indexId;
	private IMendixObject anyObject;
	private String searchText;

	public UpdateIndex(IContext context, Long indexId, IMendixObject anyObject, String searchText)
	{
		super(context);
		this.indexId = indexId;
		this.anyObject = anyObject;
		this.searchText = searchText;
	}

	@Override
	public Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		if (searchText != null && !searchText.isEmpty()) {
			Document doc = new Document();
			doc.add(new TextField(LuceneFactory.TEXT, searchText, Field.Store.YES));
			doc.add(new TextField(LuceneFactory.MXTYPE, anyObject.getType(), Field.Store.YES));
			doc.add(new TextField(LuceneFactory.MXID, Long.toString(anyObject.getId().toLong()), Field.Store.YES));
			LuceneFactory.getInstance().addDocumentQueued(indexId, doc);
		} else {
			logger.info("searchtext was empty");
		}
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "UpdateIndex";
	}

	// BEGIN EXTRA CODE
	ILogNode logger = Core.getLogger("Lucene");
	
	public String stripHTML(String value) {
		StringBuilder out = new StringBuilder();
		StringReader strReader = new StringReader(value);
		try {
			HTMLStripCharFilter html = new HTMLStripCharFilter(strReader);
			char[] cbuf = new char[1024 * 10];
			while (true) {
				int count = html.read(cbuf);
				if (count == -1)
					break; // end of stream mark is -1
				if (count > 0)
					out.append(cbuf, 0, count);
			}
			html.close();
		} catch (IOException e) {
			//todo
		}
		return out.toString();
	}
	// END EXTRA CODE
}
