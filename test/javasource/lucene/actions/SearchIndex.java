// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package lucene.actions;

import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.meta.IMetaAssociation;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import lucene.helpers.LuceneFactory;
import lucene.proxies.SearchResult;
import lucene.proxies.constants.Constants;
import org.apache.lucene.document.Document;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopScoreDocCollector;
import org.apache.lucene.store.Directory;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

/**
 * Search in a lucene index.
 * 
 * wildcards like * and ? are supported
 * operators AND OR NOT + -
 * 
 * Details: https://lucene.apache.org/core/2_9_4/queryparsersyntax.html
 * 
 * the results are objects of type SeachResult which is associated the found object.
 */
public class SearchIndex extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private IMendixObject __query;
	private lucene.proxies.SearchCommand query;

	public SearchIndex(IContext context, IMendixObject query)
	{
		super(context);
		this.__query = query;
	}

	@Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		this.query = __query == null ? null : lucene.proxies.SearchCommand.initialize(getContext(), __query);

		// BEGIN USER CODE
		String querystr = this.query.getQuery(); 
		if (querystr == null || querystr.isEmpty()) {
			logger.error("Empty Querystr passed to Searchindex");
			return null;
		}
		if (this.query.getIndexId() == null ) {
			logger.error("Missing indexId in query");
			return null;
		}
			
        Query q = new QueryParser(LuceneFactory.LUCENE_VERSION, LuceneFactory.TEXT, LuceneFactory.getInstance().getAnalyzer()).parse(querystr);
        
        // 3. searching
        int hitsPerPage  = Constants.getLuceneMaxResultCount() != null && Constants.getLuceneMaxResultCount().intValue() > 0 ? Constants.getLuceneMaxResultCount().intValue() : 100;
		Directory directory = LuceneFactory.getInstance().getDirectory(this.query.getIndexId());
        IndexReader reader = DirectoryReader.open(directory);
        IndexSearcher searcher = new IndexSearcher(reader);
        TopScoreDocCollector collector = TopScoreDocCollector.create(hitsPerPage, true);
        searcher.search(q, collector);
        ScoreDoc[] hits = collector.topDocs().scoreDocs;
     
        // 4. display results
        logger.trace("Query string: " + querystr);
        logger.trace("Found " + hits.length + " hits.");     
		// get list of results, is empty by default.
		List<SearchResult> list = new ArrayList<lucene.proxies.SearchResult>();
        for (int i = 0; i < hits.length; ++i) {
            int docId = hits[i].doc;
            Document d = searcher.doc(docId);
            logger.trace((i + 1) + ". " + d.get(LuceneFactory.MXID) + "\t" + d.get(LuceneFactory.TEXT));
            SearchResult searchResult = new SearchResult(getContext());
			searchResult.setMxId(d.get(LuceneFactory.MXID));
			searchResult.setMxType(d.get(LuceneFactory.MXTYPE));
			
			com.mendix.systemwideinterfaces.core.meta.IMetaObject mo = Core.getMetaObject(SearchResult.entityName);
			Collection<? extends IMetaAssociation> parents = mo.getMetaAssociationsParent();
			boolean connected = false;
			// try to connect to one of the associated entities
			for (IMetaAssociation parent : parents) {
				String associatedEntity = parent.getChild().getName();
				if (associatedEntity.contentEquals(d.get(LuceneFactory.MXTYPE))) {
					searchResult.getMendixObject().setValue(getContext(), parent.toString(), d.get(LuceneFactory.MXID)); 
					connected = true;
					break;
				}
			}
			if (!connected) {
				logger.error("Could not connect to entity of type " + d.get(LuceneFactory.MXTYPE) + " please create an assocation from SearchResult to " + d.get(LuceneFactory.MXTYPE) + " in your domain model");
			}			
			searchResult.commit(); // needed for non-persisent?
			list.add(searchResult);
        }
        // put back in result.
		query.setSearchCommand_SearchResult(list);
        
        
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "SearchIndex";
	}

	// BEGIN EXTRA CODE
	ILogNode logger = Core.getLogger(LuceneFactory.NodeName);
	
	// END EXTRA CODE
}
