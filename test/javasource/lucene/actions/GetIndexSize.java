// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package lucene.actions;

import java.io.File;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.store.Directory;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import lucene.helpers.LuceneFactory;

/**
 * Return the total file size of the lucene index in bytes
 */
public class GetIndexSize extends CustomJavaAction<Long>
{
	private Long indexId;

	public GetIndexSize(IContext context, Long indexId)
	{
		super(context);
		this.indexId = indexId;
	}

	@Override
	public Long executeAction() throws Exception
	{
		// BEGIN USER CODE
		File directory = LuceneFactory.getInstance().getIndexDirectory(indexId);
		Directory dir = LuceneFactory.getInstance().getDirectory(indexId);		
        IndexReader reader = DirectoryReader.open(dir);
		//return folderSize(directory);
		return Long.valueOf(reader.numDocs());
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "GetIndexSize";
	}

	// BEGIN EXTRA CODE
	public static long folderSize(File directory) {
		long size = 0;
		if (directory != null) {
			try {
				File[] files = directory.listFiles();
				if (files != null) {
					for (File file : directory.listFiles()) {
						if (file != null) {
							if (file.isFile())
								size += file.length();
							else {
								if (file.isDirectory()) {
									size += folderSize(file);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				LuceneFactory.logger.error("Error retrieving index size ", e);
			}
		}
		return size;
	}	
	public static long folderCount(File directory) {
		long length = 0;
		try {
			for (File file : directory.listFiles()) {
				if (file != null) {
					if (file.isFile())
						length += 1;
					else {
						if (file.isDirectory()) {
							length += folderCount(file);
						}
					}
				}
			}
			return length;
		} catch (Exception e) {
			LuceneFactory.logger.error("Error retrieving folder count", e);
			return length;
		}
	}	

	// END EXTRA CODE
}
