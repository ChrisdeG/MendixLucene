// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package lucene.actions;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import org.apache.commons.io.IOUtils;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import lucene.helpers.LuceneFactory;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * Stores the full contents of the lucene directory in a filedocument
 */
public class BackupCreateInFiledocument extends CustomJavaAction<Boolean>
{
	private Long indexId;
	private IMendixObject __luceneBackup;
	private lucene.proxies.LuceneBackup luceneBackup;

	public BackupCreateInFiledocument(IContext context, Long indexId, IMendixObject luceneBackup)
	{
		super(context);
		this.indexId = indexId;
		this.__luceneBackup = luceneBackup;
	}

	@Override
	public Boolean executeAction() throws Exception
	{
		this.luceneBackup = __luceneBackup == null ? null : lucene.proxies.LuceneBackup.initialize(getContext(), __luceneBackup);

		// BEGIN USER CODE
		if (!LuceneFactory.getInstance().waitForClose(indexId)) {
			throw new Exception("Unable to close the indexer.");	
		}
		File directory = LuceneFactory.getInstance().getIndexDirectory(indexId);

		File tempFile = File.createTempFile("lucenebu", ".tmp");
		try {
			ZipOutputStream zipfile = new ZipOutputStream(new FileOutputStream(tempFile));
			try {
				luceneBackup.setIndexId(indexId.intValue());
				if (luceneBackup.getName() == null || luceneBackup.getName().isEmpty()) {
					luceneBackup.setName("LuceneBackup.zip");
				}
				if (directory.exists()) {
					for (File file : directory.listFiles()) {
						if (file != null) {
							if (file.isFile()) {
								InputStream fileInputStream = new FileInputStream(file);
								try {
									zipfile.putNextEntry(new ZipEntry(file.getName()));
									IOUtils.copy(fileInputStream, zipfile);
								} finally {
									fileInputStream.close();
								}
							}
						}
					}
				}
			} finally {
				zipfile.close();
			}
			InputStream zipInputStream = new FileInputStream(tempFile);
			try {
				Core.storeFileDocumentContent(getContext(), luceneBackup.getMendixObject(), zipInputStream);
			} finally {
				zipInputStream.close();
			}
		} finally {
			tempFile.delete();
			tempFile.deleteOnExit();
		}
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "BackupCreateInFiledocument";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
