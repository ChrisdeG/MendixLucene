// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package lucene.proxies;

/**
 * storage for the index files. In a cloudslot the temp files are cleared upon deploying.
 */
public class LuceneBackup extends system.proxies.FileDocument
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Lucene.LuceneBackup";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		IndexId("IndexId"),
		IndexType("IndexType"),
		FileID("FileID"),
		Name("Name"),
		DeleteAfterDownload("DeleteAfterDownload"),
		Contents("Contents"),
		HasContents("HasContents");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public LuceneBackup(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "Lucene.LuceneBackup"));
	}

	protected LuceneBackup(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject luceneBackupMendixObject)
	{
		super(context, luceneBackupMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("Lucene.LuceneBackup", luceneBackupMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a Lucene.LuceneBackup");
	}

	/**
	 * @deprecated Use 'LuceneBackup.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static lucene.proxies.LuceneBackup initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return lucene.proxies.LuceneBackup.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static lucene.proxies.LuceneBackup initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new lucene.proxies.LuceneBackup(context, mendixObject);
	}

	public static lucene.proxies.LuceneBackup load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return lucene.proxies.LuceneBackup.initialize(context, mendixObject);
	}

	public static java.util.List<lucene.proxies.LuceneBackup> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<lucene.proxies.LuceneBackup> result = new java.util.ArrayList<lucene.proxies.LuceneBackup>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//Lucene.LuceneBackup" + xpathConstraint))
			result.add(lucene.proxies.LuceneBackup.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of IndexId
	 */
	public final Integer getIndexId()
	{
		return getIndexId(getContext());
	}

	/**
	 * @param context
	 * @return value of IndexId
	 */
	public final Integer getIndexId(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (Integer) getMendixObject().getValue(context, MemberNames.IndexId.toString());
	}

	/**
	 * Set value of IndexId
	 * @param indexid
	 */
	public final void setIndexId(Integer indexid)
	{
		setIndexId(getContext(), indexid);
	}

	/**
	 * Set value of IndexId
	 * @param context
	 * @param indexid
	 */
	public final void setIndexId(com.mendix.systemwideinterfaces.core.IContext context, Integer indexid)
	{
		getMendixObject().setValue(context, MemberNames.IndexId.toString(), indexid);
	}

	/**
	 * Set value of IndexType
	 * @param indextype
	 */
	public final lucene.proxies.IndexType getIndexType()
	{
		return getIndexType(getContext());
	}

	/**
	 * @param context
	 * @return value of IndexType
	 */
	public final lucene.proxies.IndexType getIndexType(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.IndexType.toString());
		if (obj == null)
			return null;

		return lucene.proxies.IndexType.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of IndexType
	 * @param indextype
	 */
	public final void setIndexType(lucene.proxies.IndexType indextype)
	{
		setIndexType(getContext(), indextype);
	}

	/**
	 * Set value of IndexType
	 * @param context
	 * @param indextype
	 */
	public final void setIndexType(com.mendix.systemwideinterfaces.core.IContext context, lucene.proxies.IndexType indextype)
	{
		if (indextype != null)
			getMendixObject().setValue(context, MemberNames.IndexType.toString(), indextype.toString());
		else
			getMendixObject().setValue(context, MemberNames.IndexType.toString(), null);
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final lucene.proxies.LuceneBackup that = (lucene.proxies.LuceneBackup) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "Lucene.LuceneBackup";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
