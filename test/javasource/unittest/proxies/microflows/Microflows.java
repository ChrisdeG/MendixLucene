// This file was generated by Mendix Modeler 6.0.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package unittest.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;

public class Microflows
{
	// These are the microflows for the UnitTest module
	public static void _README(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "UnitTest._README", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bCo_Company(IContext context, unittest.proxies.Company _company)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Company", _company == null ? null : _company.getMendixObject());
			return (Boolean)Core.execute(context, "UnitTest.BCo_Company", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bCo_Customer(IContext context, unittest.proxies.Customer _customer)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Customer", _customer == null ? null : _customer.getMendixObject());
			return (Boolean)Core.execute(context, "UnitTest.BCo_Customer", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bCo_Report(IContext context, unittest.proxies.Report _report)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Report", _report == null ? null : _report.getMendixObject());
			return (Boolean)Core.execute(context, "UnitTest.BCo_Report", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bDe_Company(IContext context, unittest.proxies.Company _company)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Company", _company == null ? null : _company.getMendixObject());
			return (Boolean)Core.execute(context, "UnitTest.BDe_Company", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bDe_Customer(IContext context, unittest.proxies.Customer _customer)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Customer", _customer == null ? null : _customer.getMendixObject());
			return (Boolean)Core.execute(context, "UnitTest.BDe_Customer", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean bDe_Report(IContext context, unittest.proxies.Report _report)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Report", _report == null ? null : _report.getMendixObject());
			return (Boolean)Core.execute(context, "UnitTest.BDe_Report", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void createTestCustomers(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "UnitTest.CreateTestCustomers", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void deletAllCompanies(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "UnitTest.DeletAllCompanies", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void deleteAllCustomers(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "UnitTest.DeleteAllCustomers", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void deleteAllReports(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "UnitTest.DeleteAllReports", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean disabled_Test008_Backup_Restore(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "UnitTest.Disabled_Test008_Backup_Restore", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void importExcelFortune1000(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "UnitTest.ImportExcelFortune1000", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void mB_DeleteIndexCustomers(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "UnitTest.MB_DeleteIndexCustomers", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean test001_CreateAndSearchCustomer(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "UnitTest.Test001_CreateAndSearchCustomer", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean test002_DeleteIndex(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "UnitTest.Test002_DeleteIndex", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean test003_Search_customer_London_OR_Rome(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "UnitTest.Test003_Search_customer_London_OR_Rome", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean test004_DeleteCustomers(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "UnitTest.Test004_DeleteCustomers", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean test005_ReportPDF(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "UnitTest.Test005_ReportPDF", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean test006_ReportWord2007(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "UnitTest.Test006_ReportWord2007", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean test007_DeleteAndCleanIndex(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "UnitTest.Test007_DeleteAndCleanIndex", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean test009_ReportWord2003(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "UnitTest.Test009_ReportWord2003", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean test010_ImportExcel(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "UnitTest.Test010_ImportExcel", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean test011_ReportHTML(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "UnitTest.Test011_ReportHTML", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}